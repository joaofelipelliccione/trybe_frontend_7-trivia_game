{"version":3,"sources":["images/trivia.png","images/feedback-reviews.svg","images/feedback-game.svg","images/settings-img.svg","services/triviaApi.js","redux/action/index.js","components/LoginForm.jsx","pages/Login.jsx","components/Header.jsx","components/borderColors.js","components/NextQuestBtn.jsx","components/QuestionsAndAnswers.jsx","components/FeedbackBtns.jsx","components/Feedback.jsx","pages/Game.jsx","pages/Settings.jsx","pages/Ranking.jsx","App.js","redux/reducers/user.js","redux/reducers/trivia.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","getTokenTriviaAPI","a","async","fetch","response","json","jsonFormat","getQuestionsTriviaAPI","token","apiRequestErrorAc","errorMsg","type","correctAnsInfoAC","roundScore","LoginForm","state","userName","userMail","mustRedirectToGame","onInputChange","bind","onLogIn","target","name","this","setState","value","props","setLoginInfACProp","fetchTriviaTokenProp","cleanScoreACProp","to","id","htmlFor","onChange","placeholder","disabled","length","onClick","Component","connect","dispatch","undefined","objResponse","Error","payload","email","Login","mustRedirectToSettings","src","logo","alt","role","aria-label","React","Header","userNameProp","userMailProp","scoreProp","playerInfo","player","assertions","assertionsProp","score","gravatarEmail","localStorage","setItem","JSON","stringify","userMailHash","md5","toString","urlPictureGravatar","GRAVATAR_END_POINT","user","trivia","greenBorder","border","redBorder","traditionalBorder","NextQuestBtn","onNextQuestClick","QuestionsAndAnswers","questionsArrIndex","mustChangeBorderCol","timerMax","hasAnswered","changeColors","startTimer","onAnswerClick","_prevProps","clearInterval","timerInterval","questionsArray","correctAnsInfoProp","questLevel","difficulty","questLevelNum","className","Number","renderFeedback","prevState","setInterval","map","questionObj","key","category","question","correct_answer","incorrect_answers","sort","alternative","index","style","FeedbackBtns","setLastGameInfoToLS","userPicture","getItem","rankingArray","parse","lastGameInfo","picture","updateRankingArray","Feedback","reviewsImg","width","oldGameImg","Game","mustRenderQandA","mustRenderFeedback","tokenProp","fetchTriviaQuestionsProp","questionsArrayProp","questions","response_code","fetchTriviaQuestAC","Settings","settingsImg","Ranking","sortedRankingArray","setRankingArray","playerA","playerB","microObj","App","exact","path","component","INITIAL_STATE","action","triviaReducer","results","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d97221a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/feedback-reviews.ceccd1dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/feedback-game.10a45c72.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings-img.049d5392.svg\";","const END_POINT_TOKEN = 'https://opentdb.com/api_token.php?command=request';\n\nexport const getTokenTriviaAPI = async () => {\n  const response = await fetch(END_POINT_TOKEN);\n  const jsonFormat = await response.json();\n  return jsonFormat;\n};\n\nexport const getQuestionsTriviaAPI = async (token) => {\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const jsonFormat = await response.json();\n  return jsonFormat;\n};\n","import { getTokenTriviaAPI, getQuestionsTriviaAPI } from '../../services/triviaApi';\n\n/*\nCriação da 1ª Action Creator. Essa, não será chamada dentro de thunk.\n- Sua reducer é a user().\n*/\nexport const SET_LOGIN_INFO = 'SET_LOGIN_INFO';\nexport const setLoginInfoAC = (name, email) => ({\n  type: SET_LOGIN_INFO,\n  name,\n  email,\n});\n\n/*\nCriação da 2ª Action Creator. Essa, será chamada dentro do thunk fetchTriviaToken().\n- Sua reducer é a trivia().\n*/\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nconst getTokenAC = (payload) => ({\n  type: GET_TOKEN_SUCCESS,\n  payload,\n});\n\n/*\nCriação da 3ª Action Creator. Essa, será chamada dentro do thunk fetchTriviaToken() e do thunk fetchTriviaQuestions().\n- Sua reducer é a trivia().\n*/\nexport const API_REQUEST_ERROR = 'API_REQUEST_ERROR';\nconst apiRequestErrorAc = (errorMsg) => ({ type: API_REQUEST_ERROR, errorMsg });\n\n/*\nCriação da 1ª Action Creator Thunk.\n- É uma AC especial, que retornará uma função e não um objeto como de costume.\n- A função retornada engloba a getTokenTriviaAPI() e as AC 2 e 3, mencionadas acima.\n*/\nexport const fetchTriviaToken = () => async (dispatch) => {\n  try { // Tentando realizar o fetch();\n    const objResponse = await getTokenTriviaAPI();\n    if (objResponse === undefined) {\n      throw new Error(); // Caso o retorno da API não seja o esperado, um erro será lançado.\n    }\n    dispatch(getTokenAC(objResponse)); // Mesmo se o retorno não for o esperado, o dispatch da getTokenAC() ocorrerá, entretanto, irei saber que o erro ocorreu.\n  } catch (e) { // Capturando o erro lançado acima, caso ele exista.\n    dispatch(apiRequestErrorAc(e));\n  }\n};\n\n/*\nCriação da 4ª Action Creator. Essa, será chamada dentro do thunk fetchTriviaQuestions().\n- Sua reducer é a trivia().\n*/\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\nconst getQuestionsAC = (payload) => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload,\n});\n\n/*\nCriação da 2ª Action Creator Thunk.\n- É uma AC especial, que retornará uma função e não um objeto como de costume.\n- A função retornada engloba a getQuestionsTriviaAPI() e as AC 3 e 5, mencionadas acima.\n*/\nexport const fetchTriviaQuestions = (token) => async (dispatch) => {\n  try { // Tentando realizar o fetch();\n    const objResponse = await getQuestionsTriviaAPI(token);\n    if (objResponse === undefined || objResponse.response_code !== 0) {\n      throw new Error(); // Caso o retorno da API não seja o esperado, um erro será lançado.\n    }\n    dispatch(getQuestionsAC(objResponse)); // Mesmo se o retorno não for o esperado, o dispatch da getTokenAC() ocorrerá, entretanto, irei saber que o erro ocorreu.\n  } catch (e) { // Capturando o erro lançado acima, caso ele exista.\n    dispatch(apiRequestErrorAc(e));\n  }\n};\n\n/*\nCriação da 5ª Action Creator. Essa, não será chamada dentro de thunk.\n- Sua reducer é a trivia().\n*/\nexport const CORRECT_ANSWER = 'CORRECT_ANSWER';\nconst correctAnsInfoAC = (roundScore) => ({\n  type: CORRECT_ANSWER,\n  roundScore,\n});\n\n/*\nCriação da 6ª Action Creator. Essa, não será chamada dentro de thunk.\n- Sua reducer é a trivia().\n*/\nexport const CLEAN_SCORE = 'CLEAN_SCORE';\nexport const cleanScoreAC = () => ({\n  type: CLEAN_SCORE,\n});\n\nexport default correctAnsInfoAC;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport { setLoginInfoAC, fetchTriviaToken, cleanScoreAC } from '../redux/action';\n\nclass LoginForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      userName: '',\n      userMail: '',\n      mustRedirectToGame: false,\n    };\n\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onLogIn = this.onLogIn.bind(this);\n  }\n\n  onInputChange({ target }) { // Função que altera o valor do estado local, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n    const { name } = target;\n    this.setState({ [name]: target.value });\n  }\n\n  async onLogIn() {\n    const { setLoginInfACProp, fetchTriviaTokenProp, cleanScoreACProp } = this.props;\n    const { userName, userMail } = this.state;\n\n    cleanScoreACProp();\n    await fetchTriviaTokenProp();\n    this.setState({ mustRedirectToGame: true });\n    setLoginInfACProp(userName, userMail);\n  }\n\n  render() {\n    const { userName, userMail, mustRedirectToGame } = this.state;\n    const minNumOfCaracs = 0;\n\n    if (mustRedirectToGame) {\n      return (\n        <Redirect to=\"/game\" />\n      );\n    }\n\n    return (\n      <form id=\"loginForm\">\n        <label htmlFor=\"userNameInput\">\n          <input\n            id=\"userNameInput\"\n            type=\"text\"\n            name=\"userName\"\n            value={ userName }\n            onChange={ this.onInputChange }\n            placeholder=\"Digite seu nome\"\n          />\n        </label>\n        <label htmlFor=\"userMailInput\">\n          <input\n            id=\"userMailInput\"\n            type=\"email\"\n            name=\"userMail\"\n            value={ userMail }\n            onChange={ this.onInputChange }\n            placeholder=\"Digite seu email\"\n          />\n        </label>\n        <button\n          id=\"loginBtn\"\n          type=\"button\"\n          disabled={ !(userName.length > minNumOfCaracs\n            && userMail.length > 0) } // O botão só será habilitado quando userName e userMail apresentarem, pelo menos, 1 caractere.\n          onClick={ this.onLogIn }\n        >\n          Jogar\n        </button>\n      </form>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  setLoginInfACProp: PropTypes.func.isRequired,\n  fetchTriviaTokenProp: PropTypes.func.isRequired,\n  cleanScoreACProp: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTriviaTokenProp: () => dispatch(fetchTriviaToken()),\n  setLoginInfACProp: (userName, userMail) => dispatch(setLoginInfoAC(userName, userMail)),\n  cleanScoreACProp: () => dispatch(cleanScoreAC()),\n});\n\nexport default connect(null, mapDispatchToProps)(LoginForm);\n","import React from 'react';\nimport { Redirect } from 'react-router';\nimport LoginForm from '../components/LoginForm';\nimport logo from '../images/trivia.png';\nimport '../styles/login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mustRedirectToSettings: false,\n    };\n  }\n\n  render() {\n    const { mustRedirectToSettings } = this.state;\n\n    if (mustRedirectToSettings) {\n      return (\n        <Redirect to=\"/settings\" />\n      );\n    }\n\n    return (\n      <main id=\"loginPageMain\">\n        <div id=\"loginFormContainer\">\n          <img src={ logo } alt=\"Logo da Aplicação\" />\n          <LoginForm />\n          <button\n            id=\"settingsBtn\"\n            type=\"button\"\n            onClick={ () => this.setState({ mustRedirectToSettings: true }) }\n          >\n            <span role=\"img\" aria-label=\"Emoji Engrenagem\">⚙️</span>\n          </button>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport '../styles/header.css';\n\nclass Header extends React.Component {\n  componentDidUpdate() {\n    const {\n      userNameProp, userMailProp,\n      scoreProp, assertionsProp,\n    } = this.props;\n\n    const playerInfo = { player: {\n      name: userNameProp,\n      assertions: assertionsProp,\n      score: scoreProp,\n      gravatarEmail: userMailProp,\n    } };\n    localStorage.setItem('state', JSON.stringify(playerInfo));\n\n    const userMailHash = md5(userMailProp).toString();\n    const urlPictureGravatar = `https://www.gravatar.com/avatar/${userMailHash}`;\n    localStorage.setItem('urlPictureGravatar', urlPictureGravatar);\n  }\n\n  render() {\n    const { userNameProp, userMailProp, scoreProp } = this.props;\n    const userMailHash = md5(userMailProp).toString(); // Necessário para o funcionamento do Gravatar.\n    const GRAVATAR_END_POINT = `https://www.gravatar.com/avatar/${userMailHash}`;\n\n    return (\n      <header id=\"websiteHeader\">\n        <div id=\"headerPlayerInfo\">\n          <img\n            src={ GRAVATAR_END_POINT }\n            alt=\"Foto do jogador\"\n          />\n          <span id=\"headerUserNameOutput\">\n            { userNameProp }\n          </span>\n        </div>\n        <span id=\"scoreContainer\">\n          Placar:\n          <output>\n            {' '}\n            { scoreProp }\n          </output>\n        </span>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  userNameProp: PropTypes.string.isRequired,\n  userMailProp: PropTypes.string.isRequired,\n  scoreProp: PropTypes.number.isRequired,\n  assertionsProp: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userNameProp: state.user.name,\n  userMailProp: state.user.email,\n  scoreProp: state.trivia.score,\n  assertionsProp: state.trivia.assertions,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","export const greenBorder = { border: '5px solid rgb(6, 240, 15)' };\nexport const redBorder = { border: '5px solid rgb(255, 0, 0)' };\nconst traditionalBorder = { border: '1px solid rgb(186, 186, 186)' };\n\nexport default traditionalBorder;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/nextQuestBtn.css';\n\nclass NextQuestBtn extends React.Component {\n  render() {\n    const { onNextQuestClick } = this.props;\n\n    return (\n      <button\n        id=\"nextQuestBtn\"\n        type=\"button\"\n        onClick={ onNextQuestClick }\n      >\n        Próxima\n      </button>\n    );\n  }\n}\n\nNextQuestBtn.propTypes = {\n  onNextQuestClick: PropTypes.func.isRequired,\n};\n\nexport default NextQuestBtn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport traditionalBorder, { greenBorder, redBorder } from './borderColors';\nimport correctAnsInfoAC from '../redux/action';\nimport NextQuestBtn from './NextQuestBtn';\nimport '../styles/questionsAndAnswers.css';\n\nclass QuestionsAndAnswers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionsArrIndex: 0,\n      mustChangeBorderCol: false,\n      timerMax: 30,\n      hasAnswered: false,\n    };\n\n    this.changeColors = this.changeColors.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.onAnswerClick = this.onAnswerClick.bind(this);\n    this.onNextQuestClick = this.onNextQuestClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(_prevProps, { timerMax }) { // timerMax = prevState.timerMax\n    const TIMER_MIN = 1;\n\n    if (timerMax === TIMER_MIN) {\n      clearInterval(this.timerInterval);\n      this.changeColors();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerInterval);\n  }\n\n  onAnswerClick({ target }) {\n    const { questionsArray, correctAnsInfoProp } = this.props;\n    const { questionsArrIndex, timerMax } = this.state;\n    const numberThree = 3;\n    const numberTen = 10;\n\n    const questLevel = questionsArray[questionsArrIndex].difficulty;\n    let questLevelNum = 1; // Easy questions = 1 point.\n\n    if (questLevel === 'hard') {\n      questLevelNum = numberThree;\n    }\n    if (questLevel === 'medium') {\n      questLevelNum = 2;\n    }\n\n    if (target.className === 'correctAnswer') {\n      const roundResult = Number(numberTen + timerMax * questLevelNum);\n      correctAnsInfoProp(roundResult);\n    }\n\n    this.setState({ hasAnswered: true });\n    this.changeColors();\n  }\n\n  onNextQuestClick() {\n    const { questionsArrIndex, timerMax } = this.state;\n    const { renderFeedback } = this.props;\n    const numberFour = 4;\n    const TIMER_MIN = 1;\n\n    if (questionsArrIndex < numberFour) {\n      this.setState((prevState) => ({\n        questionsArrIndex: prevState.questionsArrIndex + 1,\n        mustChangeBorderCol: false,\n        timerMax: 30,\n        hasAnswered: false,\n      }));\n    }\n    if (questionsArrIndex < numberFour && timerMax <= TIMER_MIN) {\n      this.setState((prevState) => ({\n        questionsArrIndex: prevState.questionsArrIndex + 1,\n        mustChangeBorderCol: false,\n        timerMax: 30,\n        hasAnswered: false,\n      }));\n      this.startTimer();\n    }\n    if (questionsArrIndex >= numberFour) {\n      renderFeedback();\n    }\n  }\n\n  startTimer() {\n    const ONE_SECOND = 1000;\n\n    this.timerInterval = setInterval(() => {\n      this.setState(({ timerMax }) => ({ timerMax: timerMax - 1 })); // timerMax = prevState.timerMax\n    }, ONE_SECOND);\n  }\n\n  changeColors() {\n    this.setState({ mustChangeBorderCol: true });\n  }\n\n  render() {\n    const { questionsArray } = this.props;\n    const { questionsArrIndex, mustChangeBorderCol, timerMax, hasAnswered } = this.state;\n\n    return (\n      <main id=\"cardContainer1\">\n        { questionsArray.map((questionObj) => (\n          <div id=\"cardContainer2\" key={ questionsArrIndex }>\n            <div id=\"questionCard\">\n              <h3>{questionObj.category}</h3>\n              <p>{questionObj.question}</p>\n            </div>\n            <div id=\"answerBtnsContainer\">\n              {[questionObj.correct_answer, ...questionObj.incorrect_answers]\n                .sort().map((alternative, index) => (\n                  <div id=\"answerCard\" key={ index }>\n                    {alternative === questionObj.correct_answer\n                      ? (\n                        <button\n                          className=\"correctAnswer\"\n                          type=\"button\"\n                          onClick={ this.onAnswerClick }\n                          style={ mustChangeBorderCol ? greenBorder : traditionalBorder }\n                          disabled={ timerMax <= 0 || hasAnswered }\n                        >\n                          {alternative}\n                        </button>\n                      )\n                      : (\n                        <button\n                          className=\"incorrectAnswer\"\n                          type=\"button\"\n                          onClick={ this.onAnswerClick }\n                          style={ mustChangeBorderCol ? redBorder : traditionalBorder }\n                          disabled={ timerMax <= 0 || hasAnswered }\n                        >\n                          {alternative}\n                        </button>\n                      )}\n                  </div>\n                ))}\n            </div>\n          </div>\n        ))[questionsArrIndex] }\n        <h4>{ timerMax }</h4>\n        { (timerMax <= 0 || hasAnswered)\n          && <NextQuestBtn onNextQuestClick={ this.onNextQuestClick } /> }\n      </main>\n    );\n  }\n}\n\nQuestionsAndAnswers.propTypes = {\n  questionsArray: PropTypes.arrayOf(PropTypes.object).isRequired,\n  correctAnsInfoProp: PropTypes.func.isRequired,\n  renderFeedback: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  correctAnsInfoProp: (score) => dispatch(correctAnsInfoAC(score)),\n});\n\nexport default connect(null, mapDispatchToProps)(QuestionsAndAnswers);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport '../styles/feedbackBtns.css';\n\nclass FeedbackBtns extends React.Component {\n  constructor() {\n    super();\n\n    this.setLastGameInfoToLS = this.setLastGameInfoToLS.bind(this);\n  }\n\n  setLastGameInfoToLS() {\n    const { userNameProp, scoreProp } = this.props;\n    const userPicture = localStorage.getItem('urlPictureGravatar');\n    const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n\n    const lastGameInfo = {\n      name: userNameProp,\n      score: scoreProp,\n      picture: userPicture,\n    };\n\n    if (rankingArray === null) {\n      const updateRankingArray = [lastGameInfo];\n      localStorage.setItem('ranking', JSON.stringify(updateRankingArray));\n    }\n    if (rankingArray !== null) {\n      const updateRankingArray = [...rankingArray, lastGameInfo];\n      localStorage.setItem('ranking', JSON.stringify(updateRankingArray));\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"feedbackBtnsContainer\">\n        <Link\n          to=\"/ranking\"\n        >\n          <button\n            type=\"button\"\n            onClick={ this.setLastGameInfoToLS }\n          >\n            Ver Ranking\n          </button>\n        </Link>\n        <Link\n          to=\"/\"\n        >\n          <button\n            type=\"button\"\n          >\n            Jogar Novamente\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nFeedbackBtns.propTypes = {\n  userNameProp: PropTypes.string.isRequired,\n  scoreProp: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userNameProp: state.user.name,\n  scoreProp: state.trivia.score,\n});\n\nexport default connect(mapStateToProps, null)(FeedbackBtns);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport reviewsImg from '../images/feedback-reviews.svg';\nimport oldGameImg from '../images/feedback-game.svg';\nimport FeedbackBtns from './FeedbackBtns';\nimport '../styles/feedback.css';\n\nclass Feedback extends React.Component {\n  render() {\n    const { assertionsProp, scoreProp } = this.props;\n    const numberThree = 3;\n\n    return (\n      <main id=\"feedbackPage\">\n        <div id=\"feedbackCard\">\n          <div id=\"feedbackMsg\">\n            {assertionsProp < numberThree\n              ? <h2>Poderia ter ido melhor...</h2>\n              : <h2>Mandou bem!</h2>}\n            <p>\n              Você acertou\n              <output>\n                {' '}\n                {Number(assertionsProp)}\n              </output>\n              {' '}\n              questão(ões).\n            </p>\n            <p>\n              Um total de\n              <output>\n                {' '}\n                {Number(scoreProp)}\n              </output>\n              {' '}\n              pontos.\n            </p>\n          </div>\n          <FeedbackBtns />\n        </div>\n        <div id=\"feedbackImgsContainer\">\n          <img src={reviewsImg} alt=\"Feedback\" width=\"500px\"/>\n          <img src={oldGameImg} alt=\"Console Antigo\" width=\"400px\"/>\n        </div>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertionsProp: PropTypes.number.isRequired,\n  scoreProp: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertionsProp: state.trivia.assertions,\n  scoreProp: state.trivia.score,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchTriviaQuestions as fetchTriviaQuestAC } from '../redux/action';\nimport Header from '../components/Header';\nimport QuestionsAndAnswers from '../components/QuestionsAndAnswers';\nimport Feedback from '../components/Feedback';\nimport '../styles/game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mustRenderQandA: true,\n      mustRenderFeedback: false,\n    };\n\n    this.renderFeedback = this.renderFeedback.bind(this);\n  }\n\n  async componentDidMount() {\n    const { tokenProp, fetchTriviaQuestionsProp } = this.props;\n\n    localStorage.setItem('token', tokenProp);\n    await fetchTriviaQuestionsProp(tokenProp);\n  }\n\n  renderFeedback() {\n    this.setState({\n      mustRenderQandA: false,\n      mustRenderFeedback: true,\n    });\n  }\n\n  render() {\n    const { mustRenderQandA, mustRenderFeedback } = this.state;\n    const { questionsArrayProp } = this.props;\n\n    return (\n      <div id=\"gamePage\">\n        <Header />\n        {mustRenderQandA\n          && <QuestionsAndAnswers\n            questionsArray={ questionsArrayProp }\n            renderFeedback={ this.renderFeedback }\n          />}\n        {mustRenderFeedback && <Feedback />}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  tokenProp: PropTypes.string.isRequired,\n  fetchTriviaQuestionsProp: PropTypes.func.isRequired,\n  questionsArrayProp: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  tokenProp: state.trivia.token,\n  questionsArrayProp: state.trivia.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTriviaQuestionsProp: (token) => dispatch(fetchTriviaQuestAC(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport settingsImg from '../images/settings-img.svg';\nimport '../styles/settings.css';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div id=\"settingsPage\">\n        <h1>\n          Página reservada para\n          {' '}\n          <i>features</i>\n          {' '}\n          futuros\n        </h1>\n        <Link\n          to=\"/\"\n        >\n          <button\n            id=\"backToHomeFromSettings\"\n            type=\"button\"\n          >\n            Voltar p/ Home\n          </button>\n        </Link>\n        <img src={ settingsImg } alt=\"Imagem Settings\" />\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/ranking.css';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      sortedRankingArray: [],\n    };\n\n    this.setRankingArray = this.setRankingArray.bind(this);\n  }\n\n  componentDidMount() {\n    this.setRankingArray();\n  }\n\n  setRankingArray() {\n    const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n    const sortedRankingArray = rankingArray\n      .sort((playerA, playerB) => playerB.score - playerA.score);\n    this.setState({ sortedRankingArray });\n  }\n\n  render() {\n    const { sortedRankingArray } = this.state;\n\n    return (\n      <div id=\"rankingPage\">\n        <h1>Ranking dos Melhores Jogadores</h1>\n        <div id=\"rankingContainer\">\n          {sortedRankingArray.map((microObj, index) => (\n            <div id=\"eachRankingPosition\" key={ index }>\n              <img src={ microObj.picture } alt=\"Foto do jogador\" />\n              <span>\n                {microObj.name}\n              </span>\n              <output>\n                {Number(microObj.score)}\n              </output>\n            </div>\n          ))}\n        </div>\n        <Link\n          to=\"/\"\n        >\n          <button\n            type=\"button\"\n          >\n            Jogar Novamente\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Ranking from './pages/Ranking';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/game\" component={ Game } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária.\nimport { SET_LOGIN_INFO } from '../action';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) { // Reducer responsável por armazenar o nome e o e-mail do usuário logado. Sua Action Creator é a setLoginInfoAC().\n  switch (action.type) {\n  case SET_LOGIN_INFO:\n    return {\n      ...state,\n      name: action.name,\n      email: action.email,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Esse reducer será responsável por tratar as informações do jogo.\nimport {\n  GET_TOKEN_SUCCESS,\n  API_REQUEST_ERROR,\n  GET_QUESTIONS_SUCCESS,\n  CORRECT_ANSWER,\n  CLEAN_SCORE,\n} from '../action';\n\nconst INITIAL_STATE = {\n  token: '',\n  questions: [],\n  assertions: 0,\n  score: 0,\n  errorMsg: null,\n};\n\nfunction triviaReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_TOKEN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n    };\n\n  case GET_QUESTIONS_SUCCESS:\n    return {\n      ...state,\n      questions: action.payload.results,\n    };\n\n  case API_REQUEST_ERROR:\n    return {\n      ...state,\n      errorMsg: action.errorMsg,\n    };\n\n  case CORRECT_ANSWER:\n    return {\n      ...state,\n      assertions: Number(Number(state.assertions) + 1),\n      score: Number(Number(action.roundScore) + Number(state.score)),\n    };\n\n  case CLEAN_SCORE:\n    return {\n      ...state,\n      assertions: 0,\n      score: 0,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default triviaReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport trivia from './trivia';\n\nconst rootReducer = combineReducers({ user, trivia });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store/index';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}